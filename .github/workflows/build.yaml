name: Build image

#처음 이미지 빌드 시 주석 처리 해제하지 않고 빌드
#그 이후에 소스 코드 변경 사항이 있을 경우 해당 트리거 주석 해제
on:
  push:
    #paths: 
    # - Booking_Service/**
    # - Gateway_Service/**
    # - Hotel_Service/**
    # - Loyalty_Service/**
    # - Payment_Service/**
    # - Rating_Service/**
    # - Report_Service/**
    # - Session_Service/**
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Booking Image Build
        id: build-image1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: yesterz-booking
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:0 -f Booking_Service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:0

      - name: Gateway Image Build
        id: build-image2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: yesterz-gateway
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:1 -f Gateway_Service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:1

      - name: Hotel Image Build
        id: build-image3
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: yesterz-hotel
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:2 -f Hotel_Service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:2

      - name: Loyalty Image Build
        id: build-image4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: yesterz-loyalty
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:3 -f Loyalty_Service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:3
        
      - name: Payment Image Build
        id: build-image5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: yesterz-payment
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:4 -f Payment_Service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:4

      - name: Rating Image Build
        id: build-image6
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: yesterz-rating
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:5 -f Rating_Service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:5

      
      - name: Report Image Build
        id: build-image7
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: yesterz-report
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:6 -f Report_Service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:6

      - name: Session Image Build
        id: build-image8
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: yesterz-session
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:7 -f Session_Service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:7
